// @ts-check
const { test, expect } = require('@playwright/test');

/**
 * Tests complets de workflow des t√¢ches
 * Ces tests v√©rifient le cycle de vie complet d'une t√¢che: cr√©ation, pause/reprise, suppression
 */
test.describe('AutoAgent - Workflow complet des t√¢ches', () => {
  
  test.beforeEach(async ({ page }) => {
    // Naviguer vers l'extension popup avec le chemin absolu
    await page.goto('file://' + __dirname + '/../../extension/popup.html');
    
    // Attendre que la page soit compl√®tement charg√©e
    await page.waitForLoadState('networkidle');
  });

  test('should create, pause, resume and delete a task successfully', async ({ page }) => {
    // Cr√©er une t√¢che
    await test.step('Cr√©er une nouvelle t√¢che', async () => {
      await page.fill('#taskName', 'Task Workflow Test');
      await page.fill('#promptText', 'Test prompt for complete workflow');
      
      // V√©rifier les compteurs initiaux (doivent √™tre √† 0)
      await expect(page.locator('#activeCount')).toContainText('0');
      await expect(page.locator('#pausedCount')).toContainText('0');
      
      await page.click('#createTaskBtn');
      
      // V√©rifier que la t√¢che a √©t√© cr√©√©e
      await expect(page.locator('h3').filter({ hasText: 'Task Workflow Test' })).toBeVisible();
      
      // V√©rifier la notification de succ√®s si elle existe
      const notification = page.locator('.notification').filter({ hasText: /cr√©√©e|created/i });
      if (await notification.isVisible()) {
        await expect(notification).toBeVisible();
      }
    });

    await test.step('Mettre la t√¢che en pause', async () => {
      // Cliquer sur le bouton pause (‚è∏Ô∏è)
      await page.locator('button[title*="pause"], button').filter({ hasText: '‚è∏Ô∏è' }).first().click();
      
      // V√©rifier que la t√¢che est maintenant en pause
      await expect(page.locator('.task-item').filter({ hasText: /En pause|Paused/ })).toBeVisible();
      
      // V√©rifier que l'ic√¥ne du bouton a chang√© en play (‚ñ∂Ô∏è)
      await expect(page.locator('button').filter({ hasText: '‚ñ∂Ô∏è' })).toBeVisible();
    });

    await test.step('Reprendre la t√¢che', async () => {
      // Cliquer sur le bouton play (‚ñ∂Ô∏è)
      await page.locator('button').filter({ hasText: '‚ñ∂Ô∏è' }).first().click();
      
      // V√©rifier que la t√¢che est maintenant active
      await expect(page.locator('.task-item').filter({ hasText: /Actif|Active/ })).toBeVisible();
      
      // V√©rifier que l'ic√¥ne du bouton a chang√© en pause (‚è∏Ô∏è)
      await expect(page.locator('button').filter({ hasText: '‚è∏Ô∏è' })).toBeVisible();
    });

    await test.step('Supprimer la t√¢che', async () => {
      // Cliquer sur le bouton supprimer (üóëÔ∏è)
      await page.locator('button').filter({ hasText: 'üóëÔ∏è' }).first().click();
      
      // Attendre que la suppression soit effective
      await page.waitForTimeout(1000);
      
      // V√©rifier que la t√¢che sp√©cifique n'appara√Æt plus dans la liste
      const specificTask = page.locator('.task-item').filter({ hasText: 'Task Workflow Test' });
      const isVisible = await specificTask.isVisible().catch(() => true);
      
      if (isVisible) {
        // Si la t√¢che est encore visible, forcer le rechargement pour valider la persistance
        await page.reload();
        await page.waitForTimeout(500);
        await expect(specificTask).not.toBeVisible();
      } else {
        await expect(specificTask).not.toBeVisible();
      }
      
      // V√©rifier les compteurs reviennent √† 0 (seulement si c'est la seule t√¢che)
      const taskCount = await page.locator('.task-item').count();
      if (taskCount === 0) {
        await expect(page.locator('#activeCount')).toContainText('0');
        await expect(page.locator('#pausedCount')).toContainText('0');
      }
    });
  });

  test('should handle task creation validation correctly', async ({ page }) => {
    await test.step('Tenter de cr√©er une t√¢che sans nom', async () => {
      // Remplir seulement le prompt
      await page.fill('#promptText', 'Test prompt without name');
      
      // Tenter de cr√©er la t√¢che
      await page.click('#createTaskBtn');
      
      // V√©rifier que la validation emp√™che la cr√©ation (notification ou pas de nouvelle t√¢che cr√©√©e)
      const taskCountBefore = await page.locator('.task-item').count();
      await page.waitForTimeout(500);
      const taskCountAfter = await page.locator('.task-item').count();
      
      // Soit il y a une notification d'erreur, soit aucune t√¢che n'a √©t√© cr√©√©e
      const hasErrorNotification = await page.locator('.notification').filter({ hasText: /nom|name|task/i }).first().isVisible().catch(() => false);
      
      if (!hasErrorNotification) {
        // Si pas de notification, v√©rifier qu'aucune t√¢che n'a √©t√© cr√©√©e
        expect(taskCountAfter).toBe(taskCountBefore);
      }
      
      // V√©rifier qu'aucune t√¢che n'a √©t√© cr√©√©e
      await expect(page.locator('#emptyState')).toBeVisible();
    });

    await test.step('Tenter de cr√©er une t√¢che sans prompt', async () => {
      // Nettoyer les champs
      await page.fill('#taskName', '');
      await page.fill('#promptText', '');
      
      // Remplir seulement le nom
      await page.fill('#taskName', 'Task without prompt');
      
      // Tenter de cr√©er la t√¢che
      await page.click('#createTaskBtn');
      
      // V√©rifier que la validation emp√™che la cr√©ation
      await expect(page.locator('.notification').filter({ hasText: /prompt/i })).toBeVisible();
      
      // V√©rifier qu'aucune t√¢che n'a √©t√© cr√©√©e
      await expect(page.locator('#emptyState')).toBeVisible();
    });
  });

  test('should switch between different frequency modes correctly', async ({ page }) => {
    await test.step('Tester le mode heures', async () => {
      // Cliquer sur le mode heures
      await page.locator('button[data-unit="hours"]').click();
      
      // V√©rifier que la configuration heures est visible
      await expect(page.locator('#hoursConfig')).toBeVisible();
      await expect(page.locator('#daysConfig')).not.toBeVisible();
      await expect(page.locator('#weeksConfig')).not.toBeVisible();
      
      // V√©rifier le champ minutes
      await expect(page.locator('#hourMinutes')).toBeVisible();
    });

    await test.step('Tester le mode jours', async () => {
      // Cliquer sur le mode jours
      await page.locator('button[data-unit="days"]').click();
      
      // V√©rifier que la configuration jours est visible
      await expect(page.locator('#daysConfig')).toBeVisible();
      await expect(page.locator('#hoursConfig')).not.toBeVisible();
      await expect(page.locator('#weeksConfig')).not.toBeVisible();
      
      // V√©rifier les champs heures et minutes
      await expect(page.locator('#dayHours')).toBeVisible();
      await expect(page.locator('#dayMinutes')).toBeVisible();
    });

    await test.step('Tester le mode semaines', async () => {
      // Cliquer sur le mode semaines
      await page.locator('button[data-unit="weeks"]').click();
      
      // V√©rifier que la configuration semaines est visible
      await expect(page.locator('#weeksConfig')).toBeVisible();
      await expect(page.locator('#hoursConfig')).not.toBeVisible();
      await expect(page.locator('#daysConfig')).not.toBeVisible();
      
      // V√©rifier les champs jour, heures et minutes
      await expect(page.locator('#weekDay')).toBeVisible();
      await expect(page.locator('#weekHours')).toBeVisible();
      await expect(page.locator('#weekMinutes')).toBeVisible();
    });
  });

  test('should handle language switching correctly', async ({ page }) => {
    await test.step('Changer en anglais', async () => {
      // Cliquer sur le bouton anglais
      await page.locator('button[data-lang="en"]').click();
      
      // V√©rifier que l'interface change en anglais
      await expect(page.locator('[data-i18n="newTask"]')).toContainText(/new task/i);
      await expect(page.locator('#createTaskBtn')).toContainText(/create task/i);
      
      // V√©rifier l'√©tat vide en anglais
      await expect(page.locator('[data-i18n="noTasks"]')).toContainText(/no tasks/i);
    });

    await test.step('Revenir en fran√ßais', async () => {
      // Cliquer sur le bouton fran√ßais
      await page.locator('button[data-lang="fr"]').click();
      
      // V√©rifier que l'interface revient en fran√ßais
      await expect(page.locator('[data-i18n="newTask"]')).toContainText(/nouvelle t√¢che/i);
      await expect(page.locator('#createTaskBtn')).toContainText(/cr√©er la t√¢che/i);
      
      // V√©rifier l'√©tat vide en fran√ßais
      await expect(page.locator('[data-i18n="noTasks"]')).toContainText(/aucune t√¢che/i);
    });
  });

  test('should create tasks with different frequency configurations', async ({ page }) => {
    await test.step('Cr√©er une t√¢che horaire', async () => {
      await page.locator('button[data-unit="hours"]').click();
      await page.fill('#hourMinutes', '30');
      
      await page.fill('#taskName', 'T√¢che Horaire');
      await page.fill('#promptText', 'T√¢che ex√©cut√©e toutes les heures');
      
      await page.click('#createTaskBtn');
      
      // V√©rifier la description de fr√©quence
      await expect(page.locator('.task-item').filter({ hasText: /minutes.*each hour|minutes.*chaque heure|Every hour/ })).toBeVisible();
    });

    await test.step('Cr√©er une t√¢che quotidienne', async () => {
      await page.locator('button[data-unit="days"]').click();
      await page.fill('#dayHours', '14');
      await page.fill('#dayMinutes', '30');
      
      await page.fill('#taskName', 'T√¢che Quotidienne');
      await page.fill('#promptText', 'T√¢che ex√©cut√©e tous les jours');
      
      await page.click('#createTaskBtn');
      
      // V√©rifier la description de fr√©quence
      await expect(page.locator('.task-item').filter({ hasText: '14:30' })).toBeVisible();
    });

    await test.step('Cr√©er une t√¢che hebdomadaire', async () => {
      await page.locator('button[data-unit="weeks"]').click();
      await page.selectOption('#weekDay', '5'); // Vendredi
      await page.fill('#weekHours', '10');
      await page.fill('#weekMinutes', '0');
      
      await page.fill('#taskName', 'T√¢che Hebdomadaire');
      await page.fill('#promptText', 'T√¢che ex√©cut√©e chaque vendredi');
      
      await page.click('#createTaskBtn');
      
      // V√©rifier la description de fr√©quence
      await expect(page.locator('.task-item').filter({ hasText: /vendredi/i })).toBeVisible();
    });

    // V√©rifier qu'on a maintenant 3 t√¢ches
    await expect(page.locator('.task-item')).toHaveCount(3);
  });

  test('should reset form after successful task creation', async ({ page }) => {
    // Remplir le formulaire
    await page.fill('#taskName', 'Test Reset Form');
    await page.fill('#promptText', 'Test prompt for form reset');
    await page.fill('#hourMinutes', '45');
    
    // Cr√©er la t√¢che
    await page.click('#createTaskBtn');
    
    // V√©rifier que le formulaire est r√©initialis√©
    await expect(page.locator('#taskName')).toHaveValue('');
    await expect(page.locator('#promptText')).toHaveValue('');
    await expect(page.locator('#hourMinutes')).toHaveValue('0'); // Valeur par d√©faut
    
    // V√©rifier que la t√¢che a bien √©t√© cr√©√©e
    await expect(page.locator('h3').filter({ hasText: 'Test Reset Form' })).toBeVisible();
  });
});
