// @ts-check
const { test, expect } = require('@playwright/test');

/**
 * Tests de base pour l'interface AutoAgent
 * Ces tests v√©rifient le chargement et l'affichage correct de l'interface
 */
test.describe('AutoAgent - Interface de base', () => {
  
  test.beforeEach(async ({ page }) => {
    // Naviguer vers l'extension popup avec le chemin absolu
  await page.goto('file://' + __dirname + '/../../extension/popup.html');
    
    // Attendre que la page soit compl√®tement charg√©e
    await page.waitForLoadState('networkidle');
  });

  test('should load the popup interface successfully', async ({ page }) => {
    // V√©rifier le titre de la page
    await expect(page).toHaveTitle('AutoAgent - AI Task Automation');
    
    // V√©rifier la pr√©sence du header principal
    const header = page.locator('h1');
    await expect(header).toBeVisible();
    await expect(header).toContainText('AutoAgent');
    
    // V√©rifier que le header contient le robot emoji et AI (multilingual)
    const headerText = await header.textContent();
    expect(headerText).toMatch(/ü§ñ.*AutoAgent/);
    // Le badge AI est inclus dans la traduction, pas besoin de test s√©par√©
  });

  test('should display language selector buttons', async ({ page }) => {
    // V√©rifier la pr√©sence des boutons de langue
    const frenchBtn = page.locator('[data-lang="fr"]');
    const englishBtn = page.locator('[data-lang="en"]');
    
    await expect(frenchBtn).toBeVisible();
    await expect(englishBtn).toBeVisible();
    
    // V√©rifier les emojis des drapeaux
    await expect(frenchBtn).toContainText('üá´üá∑');
    await expect(englishBtn).toContainText('üá¨üáß');
  });

  test('should display main form sections', async ({ page }) => {
    // V√©rifier la section "Nouvelle t√¢che"
    const newTaskSection = page.locator('[data-i18n="newTask"]');
    await expect(newTaskSection).toBeVisible();
    
    // V√©rifier la pr√©sence des champs principaux
    await expect(page.locator('#taskName')).toBeVisible();
    await expect(page.locator('#promptText')).toBeVisible();
    
    // V√©rifier le bouton de cr√©ation (accepter fran√ßais ou anglais)
    const createBtn = page.locator('#createTaskBtn');
    await expect(createBtn).toBeVisible();
    const createBtnText = await createBtn.textContent();
    expect(createBtnText).toMatch(/(Cr√©er la t√¢che|Create task)/i);
  });

  test('should display task list section', async ({ page }) => {
    // V√©rifier la section "Mes t√¢ches" (accepter fran√ßais ou anglais)
    const tasksHeader = page.locator('[data-i18n="myTasks"]');
    await expect(tasksHeader).toBeVisible();
    const tasksHeaderText = await tasksHeader.textContent();
    expect(tasksHeaderText).toMatch(/(Mes t√¢ches|My tasks)/i);
    
    // V√©rifier les indicateurs de statut
    const activeIndicator = page.locator('#activeCount');
    const pausedIndicator = page.locator('#pausedCount');
    
    await expect(activeIndicator).toBeVisible();
    await expect(pausedIndicator).toBeVisible();
    
    // Par d√©faut, les compteurs doivent √™tre √† 0
    await expect(activeIndicator).toContainText('0');
    await expect(pausedIndicator).toContainText('0');
  });

  test('should have proper styling and layout', async ({ page }) => {
    // V√©rifier que l'interface a un design futuriste
    const container = page.locator('.container');
    await expect(container).toBeVisible();
    
    // V√©rifier la pr√©sence des effets visuels (les particules peuvent ne pas √™tre visibles)
    const particleEffects = page.locator('.absolute.inset-0.overflow-hidden');
    await expect(particleEffects).toBeAttached(); // V√©rifie la pr√©sence dans le DOM, pas la visibilit√©
    
    // Prendre une capture d'√©cran pour v√©rification visuelle
    await page.screenshot({ 
      path: 'test-results/interface-base.png',
      fullPage: true 
    });
  });
});
